# Faps program defaults for all available options
#
# !! DO NOT MODIFY !!
#
# This file will be overwritten in updates.
#
# Set customized options for the running environment
# in site.ini in the script directory, and job specific
# options in your ~/.faps/ directory or calculation
# specific settings in structure.fap in the working directory.
#
# Acceptable boolean values (case-insensitive) are True,
# yes, on, 1 and False, no, off, 0


# Files to keep and compress after a successful absl job.
# @type list, str
# @advanced
# @section system
absl_compress_files = OUTPUT */OUTPUT REVCON */REVCON */STATIS

# Binding sites are measured by their occupancy. Ignore maxima values when
# their occupancy falls below this value multiplied by the value at the
# highest maximums. Zero means use all values.
# @type float
# @advanced
# @section gcmc
absl_cutoff = 0.0

# Files to delete after a successful absl job.
# @type list, str
# @advanced
# @section system
absl_delete_files = REVIVE */REVIVE */*.out *.out CONFIG */CONFIG FIELD */FIELD CONTROL */CONTROL

# Helper script name for absl job parts. faps will generate this script
# first so don't change the name unless you know what you are doing.
# see dl_poly_exe for the executables.
# @type str
# @advanced
# @section system
absl_exe = ./absl_faps

# Binding site location ignores maxima found within a certain radius of a
# higher maximum. The radius here, in Angstrom, is converted to an approximate
# number of grid points.
# @type float
# @advanced
# @section gcmc
absl_radius = 0.31

# Amount of smoothing to perform on the probability distribution. The value
# here is converted to a sigma for a gaussian kernel with by the equation
# sigma = sqrt(absl_sigma/grid_spacing)
# @type float
# @advanced
# @section gcmc
absl_sigma = 2.0

# Method to use for calculating atomic point charges.
# @type enum {repeat, gulp, egulp}
# @section control
charge_method = repeat

# Use a a specific queue when submitting jobs e.g. NRAP12345 on sharcnet.
# Leave blank for none.
# @type str
# @advanced
# @section system
dedicated_queue =

# Cell parameters, in A, to use only when they are not specified in the
# input structure (e.g. for .xyz). Use either (a, b, c, alpha, beta, gamma) or
# ((ax, ay, az), (bx, by, bz), (cx, cy, cz)) notation.
# @type list, float
# @advanced
# @section structure
default_cell = (10.0, 10.0, 10.0, 90, 90, 90)

# Method to use for dft calculation including optimization step and ESP
# generation.
# @type enum {vasp, siesta}
# @section control
dft_code = vasp

# Turn on empirical dispersion corrections in dft codes that support it.
# @type bool
# @advanced
# @section dft
dispersion = True

# Location of DL_POLY executable.
# @type str
# @advanced
# @section system
dl_poly_exe = DLPOLY.X

# Location of Eugene's QEq code.
# @type str
# @advanced
# @section system
egulp_exe = egulppot

# Use egulp to generate a gridded potential.
# @type bool
# @advanced
# @section charges
egulp_grid = False

# When egulp is used to generate a gridded potential, use this line verbatim
# to pass options to the gridding input file.
# @type str
# @advanced
# @section charges
egulp_grid_parameters = 1 none 0.25 0.25 0.25 1.0 2.0 0 3.0

# Calculate the potential from the egulp point charges and save the cube file.
# @type bool
# @advanced
# @section charges
egulp_potential = False

# Calculate the potential difference between egulp charges and input charges.
# @type bool
# @advanced
# @section charges
egulp_potential_difference = False

# Use separate parameters for oxygen and hydrogen atoms in egulp.
# @type bool
# @advanced
# @section charges
egulp_typed_atoms = False

# Email addresses to send the results to after a successful job completion.
# Email contains .csv files, .cif file and contents of .flog file.
# @type list, str
# @section control
email =

# Equation of state to use to calculate the gas fugacities from the pressures.
# @type enum {ideal, peng-robinson}
# @section gcmc
equation_of_state = ideal

# Target resolution of the esp grid in Angstrom.
# @type float
# @advanced
# @section charges
esp_resolution = 0.1

# files to keep and compress after a successful fastmc job.
# @type list, str
# @advanced
# @section system
fastmc_compress_files = *.cube

# files to delete after a successful fastmc job [str, list]
# @type list, str
# @advanced
# @section system
fastmc_delete_files =

# Location of fastmc executable, must be the full path or be in the
# user's $PATH. [str]
# @type str
# @advanced
# @section system
fastmc_exe = gcmc.x

# Should the original, unfolded, probability density cube files be kept after
# folding (or deleted)?
# @type bool
# @advanced
# @section system
fastmc_keep_unfolded_cubes = False

# Number of CPUs to run fastmc on. Make sure that you use the
# correct fastmc_exe for parallel runs.
# @type int
# @section control
fastmc_ncpu = 1

# Method to use to do force field optimisations.
# @type enum {gulp, gromacs}
# @section control
ff_opt_code = gulp

# Calculate the location of the guests from the probability cube. This is
# required for ABSL so should be left active.
# @type bool
# @advanced
# @section gcmc
find_maxima = True

# Fold probability plot cube from GCMC into the unit cell. Gives smoother
# distributions and smaller files
# @type bool
# @advanced
# @section gcmc
fold = True

# Gromacs preprocessor executable, usually grompp or grompp_d for double
# precision calculations (preferred)
# @type str
# @advanced
# @section system
grompp_exe = grompp_d

# Files to keep and compress after a successful GROMACS job.
# @type list, str
# @advanced
# @section system
gromacs_compress_files = *.itp *md.log* traject*.gro

# Files to delete after a successful GROMACS job.
# @type list, str
# @advanced
# @section system
gromacs_delete_files = *topol.tpr* g.log *traj.trr* *confout.gro* *ener.edr* *mdout.mdp* state.cpt

# Helper script name for gromacs job parts. faps will generate this script
# first so don't change the name unless you know what you are doing.
# see mdrun_exe and grompp_exe for the executables.
# @type str
# @advanced
# @section system
gromacs_exe = ./gromacs_faps

# Alter the force field used to model the metal geometry. {uff, input, fix}
# 'uff'    Use regular UFF parameters for the complete topology.
# 'input'  Use bond angles and distances from the input structure for
#          the topology of the metals.
# 'fix'    Use the input topology for metals and apply a rigid potential.
# @type enum {uff, input, fix}
# @advanced
# @section force_field
gromacs_metal_geometry = input

# Make gromacs produce more output like trajectories and energies. Check
# that the files to keep are in gromacs_delete_files.
# @type bool
# @advanced
# @section force_field
gromacs_verbose = False

# Guest molecules to use in GCMC simulations. See documentation or guests.lib
# for list of built in guests.
# @type list, str
# @section gcmc
guests = CO2

# Reduce the standard output of GULP to a minimum with no movie files [bool]
# @type bool
# @advanced
# @section force_field
gulp_terse = True

# Location of GULP exe. [str]
# @type str
# @advanced
# @section system
gulp_exe = gulp

# Try to read in data from a previous calculation. This should probably be done
# through the commandline --import option.
# @type bool
# @advanced
# @section control
import = False

# If bonding information is found, but atoms are not typed for force field
# using _atom_type_description, then use openbabel to derive UFF types.
# @type bool
# @advanced
# @section structure
infer_types_from_bonds = True

# Filetype for input structure file.
# @type enum {cif, pdb, vasp, xyz, sql}
# @advanced
# @section structure
initial_structure_format = cif

# Enable interactive interface. Opens a propmt after initialisation with
# access to internal objects, for very advanced use only.
# @type bool
# @advanced
# @section control
interactive = False

# Kpoint grid size for dft calculations. Ensure that gamma-point only
# exe is not used for calculations with more than one kpoint.
# @type list, int
# @advanced
# @section dft
kpoints = (1, 1, 1)

# Method to use for Monte Carlo calculations.
# @type enum {fastmc}
# @section control
mc_code = fastmc

# Lennard-Jones Potential cutoff, in Angstrom, to use in GCMC. This will also
# be used to determine the minimum supercell size for the simulation.
# @type float
# @advanced
# @section gcmc
mc_cutoff = 12.5

# Number of steps to carry out for the GCMC equilibration phase. For parallel
# jobs each node will carry out this number of steps. Use negative values for
# MC cycles (steps per guest).
# @type int
# @section gcmc
mc_eq_steps = 1000000

# How often to write the fastmc history. This file can get very large. Set to
# 0 to disable.
# @type int
# @advanced
# @section gcmc
mc_history_freq = 0

# Add the 'jobcontrol' directive in the fastmc input files so that GCMC must
# be stopped manually.
# @type bool
# @advanced
# @section gcmc
mc_jobcontrol = False

# Number of steps between writes of the fastmc numguests.out file.
# @type int
# @advanced
# @section gcmc
mc_numguests_freq = 1000

# Pressure points to run GCMC simulations at, in bar. Each combination of
# temperature and pressure will be run individually to generate isotherms. For
# multiple pressure points and guests use nested lists to keep track of the
# order: ((g1p1, g2p1, ...), (g1p2, g2p2, ...), ...).
# @type list, float
# @section gcmc
mc_pressure = 0.15

# Turn on probability plots in GCMC. This is required for ABSL.
# @type bool
# @section gcmc
mc_probability_plot = False

# Distance between grid points (resolution) in Angstrom for GCMC
# probability density plots.
# @type bool
# @advanced
# @section gcmc
mc_probability_plot_spacing = 0.1

# Number of steps to carry out for the GCMC production phase. For parallel
# jobs this is the totla number of steps, distributed over the nodes. Use
# negative values for MC cycles (steps per guest).
# @type int
# @section gcmc
mc_prod_steps = 10000000

# Individual state points to run GCMC simulations; These are separate from,
# and run in addition to, isotherms defined by tempearture and pressure
# combinations. Specify points (bar/Kelvin) as:
# (T1, (g1p1, g2p1, ...)), (T2, (g1p2, g2p2, ...), ...
# @type list, float
# @section gcmc
mc_state_points =

# Minimum supercell to use in the GCMC simulations. These values will only be
# used if the individual dimenstions are larger than the supercell calculated
# from the minimum image criterion of the Lennard-Jones cutoff.
# @type list, int
# @advanced
# @section gcmc
mc_supercell = (1, 1, 1)

# Temperature(s) to use in GCMC simulations (Kelvin). These are combined with
# all requested pressures to produce isotherms at each temperature.
# @type list, float
# @section gcmc
mc_temperature = 298

# Do not use charges in the GCMC (set them all to zero) even if they have
# been calculated previously.
# @type bool
# @advanced
# @section gcmc
mc_zero_charges = False

# Gromacs main executable, usually mdrun or mdrun_d for double precision
# calculations (preferred).
# @type str
# @advanced
# @section system
mdrun_exe = mdrun_d

# Do not postprocess GCMC to find the binding sites with ABSL. ABSL Requires a
# probability density plot from GCMC.
# @type bool
# @section control
no_absl = False

# Skip the charge calculation step; If charges are not set in the
# input file or by other means they will all be zero.
# @type bool
# @section control
no_charges = False

# Skip the dft/optimization step; Structure will not be DFT optimized and
# charge calculation may fail if it depends on the ESP from this step.
# @type bool
# @section control
no_dft = False

# Do not pre-optimise with a molecular mechanics force field. Ususally requires
# topology defined in the input file.
# @type bool
# @section control
no_force_field_opt = True

# Do not run the GCMC simulations.
# @type bool
# @section control
no_gcmc = False

# Do not run the various structural property calculations, e.g. zeo++,
# surface areas.
# @type bool
# @section control
no_properties = False

# Do not submit jobs; just create input files. Things will go wrong if you
# do this but it can be used to create input files. Also accessible with the
# '-n' commandline option.
# @type bool
# @advanced
# @section control
no_submit = False

# Optimize positions of hydrogens in the DFT optimization step.
# @type bool
# @section dft
optim_h = True

# Optimize all atom positions in the DFT optimization step.
# @type bool
# @section dft
optim_all = False

# Optimize the cell vectors in DFT optimization step.
# @type bool
# @section dft
optim_cell = False

# Force re-ordering of atoms when reading files (default behaviour in faps
# version 1.3 and lower). Setting to a True will always force legacy atom
# ordering for compatibility with old simulations. False will prevent
# re-ordering unless it is needed (e.g. vasp fails with too many atom types)
# @type bool
# @advanced
# @section structure
order_atom_types = False

# Do not colourise output. Ignored here can only be changed with commandline
# arguments.
# @type bool
# @advanced
# @section system
plain = False

# Use PLATON to calculate the PXRD pattern.
# @type bool
# @advanced
# @section properties
platon_pxrd = True

# location of the PLATON executable.
# @type str
# @advanced
# @section system
platon_exe = platon

# Location of VASP POTCARs. Points to the root folder where the downloaded
# tarball has been extracted, with each element in a folder.
# @type str
# @advanced
# @section system
potcar_dir = /share/apps/vasp/potcar/PBE

# Location of siesta psf pseudopotentials. All elements in the same folder
# named ElementSymbol.psf.
# @type str
# @advanced
# @section system
psf_dir = /share/apps/siesta/psf/GGA_Abinit_2012

# Fit charge equilibration parameters to calculated (or imput) charges.
# @type bool
# @advanced
# @section charges
qeq_fit = False

# Custom parameter sets for QEq as (atom, electronegativity, 0.5*hardness).
# Predefined parameter sets can also be named anywhere here. Predefined sets
# are {mepo}.
# @type list, str
# @section charges
qeq_parameters =

# Queuing system to use for submitting and monitoring jobs.
# @type enum {serial, sharcnet, slurm, wooki}
# @advanced
# @section system
queue = wooki

# Only output errors in the standard output. Log file is still written. This
# will be ignored here, use the commandline option '--quiet' instead.
# @type bool
# @advanced
# @section system
quiet = False

# Files to keep and compress after a successful REPEAT job.
# @type list, str
# @advanced
# @section system
repeat_compress_files = *.cube

# Files to delete after a successful REPEAT job.
# @type list, str
# @advanced
# @section system
repeat_delete_files = ESP_real_coul.dat fort.30 fort.40 REPEAT_param.inp

# Location of REPEAT executable.
# @type str
# @advanced
# @section system
repeat_exe = repeat.x

# Number of CPUs to use for REPEAT calculation. Ensure that repeat_exe points
# to a parallel version if using more than one CPU.
# @type int
# @section control
repeat_ncpu = 1

# Run all the steps without stopping. Setting this option to False will
# prevent postrun jobs from being submitted following each step in the
# calculation.
# @type bool
# @advanced
# @section control
run_all = True

# Maximum memory that can be used for serial calculations, in GB.
# If using serial repeat this can restrict the resolution of the ESP.
# @type float
# @advanced
# @section system
serial_memory = 12.0

# Overall acucracy setting for siesta calcualtions. Sets cutoffs and basis
# size to predefined values.
# @type enum {low, med, high}
# @section dft
siesta_accuracy = med

# Files to keep and compress after a successful SIESTA job.
# @type list, str
# @advanced
# @section system
siesta_compress_files =

# Files to delete after a successful SIESTA job.
# @type list, str
# @advanced
# @section system
siesta_delete_files = *.ion *.xml INPUT_TMP* *.DM

# Location of siesta executable.
# @type str
# @advanced
# @section system
siesta_exe = siesta

# Number of CPUs to use for siesta.
# @type int
# @section control
siesta_ncpu = 1

# Command used to convert siesta ESP to .cube file for REPEAT.
# @type str
# @advanced
# @section system
siesta_to_cube = siesta2repeat

# Only emit critical messages in the standard output. Log file is still
# written. This will be ignored here, use the commandline option '--silent'
# instead.
# @type bool
# @advanced
# @section system
silent = False

# Turn on spin polarization in DFT calculations.
# @type bool
# @section dft
spin = False

# Radii of probes for calculating surface areas using the built-in method. A
# probe of radius 0.0 will generate the VdW surface. Typical values for probe
# molecules are 1.42 (H2O), 1.72 (CO2) or 1.82 (N2) (A). These surfaces are
# used for hydriphilic surface determination, but are slow.
# @type list, float
# @section properties
surface_area_probe =

# Approximate area per point (resolution), in A^2, to use when subdividing
# accessible surface areas using the built in method.
# @type float
# @advanced
# @section properties
surface_area_resolution = 0.03

# After determining the surface area with built-in method, save the valid
# points on the surface to a file.
# @type bool
# @advanced
# @section properties
surface_area_save = False

# For the built-in surface area calculation use points with a uniform spacing
# (or do Monte Carlo sampling of the surface)?
# @type bool
# @advanced
# @section properties
surface_area_uniform_sample = False

# When using REPEAT, treat symmetrical atoms as equivalent for charges.
# Needs testing, may not work for newest versions of REPEAT.
# @type bool
# @advanced
# @section charges
symmetry = False

# Use tar to create an archive of all the output files when the job is
# finished.
# @type bool
# @advanced
# @section control
tar_after = False

# If calculations exist in a tar file from a previous calculation, extract their
# contents before starting the next step (useful for import).
# @type bool
# @advanced
# @section control
tar_extract_before = False

# List of codes that use OpenMP threaded parallelisation, as opposed to MPI
# parallelisation. Affects how the jobs are run or submitted in some systems.
# @type list
# @advanced
# @section system
threaded_codes = repeat

# Maximum memory to use for threaded calculations, in GB. Affects how jobs are
# run in certain systems.
# @type float
# @advanced
# @section system
threaded_memory = 12.0

# Gromacs trajectory converter, usually trjconv or trjconv_d for double
# precision calculations (preferred).
# @type str
# @advanced
# @section system
trjconv_exe = trjconv_d

# When restarting a job, e.g. after a step completes, re-read options and
# configuration files. Otherwise, previous configuration is kept.
# @type bool
# @advanced
# @section system
update_opts = True

# Files to keep and compress after a successful VASP job.
# @type list, str
# @advanced
# @section system
vasp_compress_files = LOCPOT CHGCAR vasprun.xml

# Any options to add to the INCAR file. Text is copied verbatim and faps will
# not overwrite any keys that are specified here.
# @type str
# @advanced
# @section dft
vasp_custom_incar =

# Files to delete after a successful VASP job.
# @type list, str
# @advanced
# @section system
vasp_delete_files = WAVECAR CHG DOSCAR EIGENVAL POTCAR PCDAT IBZKPT XDATCAR KPOINTS

# Name (location) of vasp executable.
# @type str
# @advanced
# @section system
vasp_exe = vasp

# Number of cpus to run vasp on.
# @type int
# @section control
vasp_ncpu = 12

# Command to convert LOCPOT from VASP to .cube for REPEAT.
# @type str
# @advanced
# @section system
vasp_to_cube = vasp_to_cube

# Print extra debugging information to the standard output and log file. This
# will be ignored here, use the '--verbose' on the commandline instead.
# @type bool
# @advanced
# @section system
verbose = False

# Run zeo++ on the structure to calculate pore properties.
# @type bool
# @section control
zeo++ = True

# Command to use to run zeo++. Faps will generate the complete command lines.
# @type str
# @advanced
# @section system
zeo++_exe = network

