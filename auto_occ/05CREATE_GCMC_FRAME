#!/usr/bin/env python

import os
import sys
import time
from JOB_OPTIONS import *
import subprocess


pid = str(os.getpid())

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

usage  = '''
---------------------------------------------------
Usage:
05CREATE_GCMC_FRAME [GCMC JOB NAME]
---------------------------------------------------
'''

#Check if there are enough arguments in the call to main
if(len(sys.argv)!=2):
    print " ["+pid+"] "+time.ctime()+ "| "+"| Too many/few arguments"
    print " ["+pid+"] "+time.ctime()+ "| "+usage
    sys.exit(EXIT_FAILURE)


dump = True
basevars = dir()

def vardump(newvars):
    if dump:
        for varname in basevars:
            newvars.remove(str(varname))
        for possiblefunction in newvars:
            if str(eval(str(possiblefunction))).__contains__("0x"):
                newvars.remove(str(possiblefunction))
        for possiblefunction in newvars:
            if str(eval(str(possiblefunction))).__contains__("0x"):
               	newvars.remove(str(possiblefunction))
        for newvarname in newvars:
            print "#dump#%(name)35s evaluates to | %(eval)35s" % {'name':newvarname,'eval':eval(newvarname)}


MAIN_GCMC_PACKAGE = init_variable("MAIN_GCMC_PACKAGE")




GCMC_NUMBER_TO_AVERAGE = init_variable("GCMC_NUMBER_TO_AVERAGE")
GCMC_ACCEPTANCES = init_variable("GCMC_ACCEPTANCES")
GCMC_PRODUCTION_AVERAGE = init_variable("GCMC_PRODUCTION_AVERAGE")
GCMC_IDEAL_GAS_PRESSURE = init_variable("GCMC_IDEAL_GAS_PRESSURE")
GCMC_PROBABILITY_PLOT = init_variable("GCMC_PROBABILITY_PLOT")
GCMC_WINDOW_SIZE =  init_variable("GCMC_WINDOW_SIZE")
GCMC_CONVERGENCE_CRITERIA = init_variable("GCMC_CONVERGENCE_CRITERIA")
GCMC_GCMCPAR = init_variable("GCMC_GCMCPAR")
GCMC_NUM_PROCESSORS = int(init_variable("GCMC_NUM_PROCESSORS"))
GCMC_WAIT_TIME = init_variable("GCMC_WAIT_TIME")

GCMC_GUEST_NAME = init_variable("GCMC_GUEST_NAME")

NEW_DIR_NAME = str(sys.argv[1])+"_"+GCMC_GUEST_NAME


def assign_new_directory():
    global NEW_DIR_NAME
    for i in range(100):
        if not(os.path.exists(NEW_DIR_NAME+"_%(a)02i" % {'a':i+1})):
            NEW_DIR_NAME = NEW_DIR_NAME+"_%(a)02i" % {'a':i+1}
            break
    os.system("echo "+NEW_DIR_NAME+" > ACTIVE_DIR")


def qexists(jobID):
    qlist = subprocess.Popen('qstat',stdout=subprocess.PIPE,shell=True).stdout
    first_line = qlist.readline()
    if not(first_line.split() == ['Job', 'id', 'Name', 'User', 'Time', 'Use', 'S', 'Queue']):
        print " ["+pid+"] "+time.ctime()+ "| "+"\nProblem with qstat. Not returning jobs.  Waiting . . \n"
        found=1
        return found
    qlist.readline()
    all_jobs = qlist.readlines()
    found = 0
    if len(all_jobs) == 0:
        print " ["+pid+"] "+time.ctime()+ "| "+"Error. Submit script not outputting. Can't grab JobID"
        sys.exit(EXIT_FAILURE)
    job_found = False
    for i in range(len(all_jobs)):
        if(all_jobs[i].split(".")[0]==str(job_id)) :
            found+=1
    return found


assign_new_directory()

#Building directory structure
os.system('mkdir '+NEW_DIR_NAME)

if MAIN_GCMC_PACKAGE == "DLPOLY":
    os.system('mkdir '+NEW_DIR_NAME+"/original")

#Pulling in Guest Coordinates
GUEST = open('GUEST','r').readlines();
GCOORDS = []
SWITCH = 0
for i in range(len(GUEST)):
    if SWITCH:
        GCOORDS.append(GUEST[i])
    if (GUEST[i].strip().upper() == "FINISH"):
        SWITCH = 1

def write_GCMC_IN_FILE():
    GCMC_IN_FILE = open('GCMC.in','w')
    GCMC_IN_FILE.write("GCMC Run of "+GUEST[0][0]+" in "+sys.argv[1]+"\n")
    GCMC_IN_FILE.write('''
# Maximum number (integer) of accepted Monte Carlo steps (system may not be converged - use production averaging for production runs)
ACCEPTANCES '''+str(GCMC_ACCEPTANCES)+"\n")
    GCMC_IN_FILE.write('''
# Data is gathered for this many total Monte Carlo steps (integer) after 'START AVERAGING' point specified in 'jobcontrol.in'
&PRODUCTION AVERAGE '''+str(GCMC_PRODUCTION_AVERAGE)+"\n")
    GCMC_IN_FILE.write('''
# Ideal gas pressure in Pa
&IDEAL GAS PRESSURE '''+str(GCMC_IDEAL_GAS_PRESSURE)+"\n")
    GCMC_IN_FILE.write('''
# Request probability plot with archive frequency per acceptance - will only be initiated in conjuction with production averaging
&PROBABILITY PLOT '''+str(GCMC_PROBABILITY_PLOT)+"\n")
    GCMC_IN_FILE.write('''
# Molecule block
&MOLECULE
&TYPE guest
&NAME '''+GUEST[0])
    GCMC_IN_FILE.write('''&ATOMS '''+str(len(GCOORDS))+"\n")
    for i in range(len(GCOORDS)):
        GCMC_IN_FILE.write(GCOORDS[i])
    GCMC_IN_FILE.close()

if MAIN_GCMC_PACKAGE == "DLPOLY":
    write_GCMC_IN_FILE()


if MAIN_GCMC_PACKAGE == "DLPOLY":
    os.system('cp GCMC.in FIELD CONTROL CONFIG '+NEW_DIR_NAME+"/original")
    os.chdir(os.getcwd()+"/"+NEW_DIR_NAME+"/original")
    #Runs 1 STEP DL_POLY job and pulls job ID from standard out.
    dlpoly_outstream = subprocess.Popen('dlpoly2submit '+sys.argv[1]+" 1", stderr=subprocess.PIPE,stdout=subprocess.PIPE,shell=True).stdout
    job_lines = dlpoly_outstream.readlines()
    job_id = "x.x"
    for i in range(len(job_lines)):
        if(len(job_lines[i].split("."))>1):
            if(job_lines[i].split(".")[1] == "wooki"):
                job_id = job_lines[i].split(".")[0]
                break
    print " ["+pid+"] "+time.ctime()+ "| "+"DL_POLY Queue ID: "+job_id

    #Sleeps while job still exists
    while(qexists(job_id)):
         time.sleep(10)

    print " ["+pid+"] "+time.ctime()+ "| "+"DL_POLY 1-step run finished"

elif MAIN_GCMC_PACKAGE == "FASTGCMC":
    print " ["+pid+"] "+time.ctime()+ "| "+"New Run directory set:" + NEW_DIR_NAME
    os.system('cp FIELD CONTROL CONFIG '+NEW_DIR_NAME)


vardump(dir())
