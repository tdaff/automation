#!/usr/bin/env python

"""
function_switch.py

Alter a known structure with new functional groups ready for fapping.

"""


import copy
import ConfigParser
import re
from math import factorial
from itertools import chain, combinations

import numpy as np
from numpy import array, asarray, dot, cross
from numpy.linalg import norm

from faps import Structure, Atom
from faps import unique


class ModifiableStructure(Structure):
    """
    Derivative of Structure with methods to facilitate function group
    switching. Use as a staging area for new methods to refactor
    the parent Structure class

    """

    def gen_connection_table(self):
        """
        Determine connectivity from the neighbout list.

        """
        self.gen_neighbour_list()
        self.attachments = []
        for atom in self.atoms:
            atom.bonds = []
            for neighbour in atom.neighbours:
                if neighbour[0] < 0.5*(atom.vdw_radius + self.atoms[neighbour[1]].vdw_radius):
                    atom.bonds.append(neighbour)
                    break
            if atom.type == 'H':
                self.attachments.append((self.atoms.index(atom), atom.bonds))

    def gen_site_connection_table(self):
        u_atoms = unique(self.atoms, key=lambda x: x.site)
        self.gen_neighbour_list()
        self.attachments = []
        for atom in u_atoms:
            atom.bonds = []
            for neighbour in atom.neighbours:
                if neighbour[0] < 0.5*(atom.vdw_radius + self.atoms[neighbour[1]].vdw_radius):
                    atom.bonds.append(neighbour)
                    break
            if atom.type == 'H':
                self.attachments.append((self.atoms.index(atom), atom.bonds))




def to_xyz(atoms, charges=True):
    """
    Return a list of atoms in xyz compatible format (includes charges)
    """

    if charges:
        xyz = ["%-6s" % atom.type +
               "%9.6f %9.6f %9.6f" % tuple(atom.pos) +
               "%11.6f\n" % atom.charge for atom in atoms]
    else:
        xyz = ["%-6s" % atom.type +
               "%9.6f %9.6f %9.6f" % tuple(atom.pos) for atom in atoms]

    # header needs the atom counts
    xyz = [" %i\n" % len(atoms), "Structure file generated by faps\n"] + xyz

    return xyz


class FunctionalGroupLibrary(dict):
    """
    Container for all the available functional groups just subclasses
    the standard dict adding some new methods.

    """
    def from_file(self, library_file_name='functional_groups.lib'):
        """Parse groups from the ConfigParser .ini style file."""
        # just a standard ConfigParser conversion to a dict of
        # FunctionalGroup objects
        library_file = ConfigParser.SafeConfigParser()
        library_file.read(library_file_name)
        for group_name in library_file.sections():
            self[group_name] = FunctionalGroup(library_file.items(group_name))


class FunctionalGroup(object):
    """
    Substitutable functional group. Bunch of atoms with information on how
    to connect to the framework

    """

    def __init__(self, items):
        """Initialize from a list of tuples as the attributes."""
        # These are defaults, best that they are overwritten
        self.atoms = []
        self.orientation = [0, 1, 0]

        # pop the items from a dict giving neater code
        items = dict(items)

        self._parse_atoms(items.pop('atoms'))
        self.orientation = string_to_tuple(items.pop('orientation'), float)
        # Arbitrary attributes can be set
        self.__dict__.update(items)

    def _parse_atoms(self, atom_text):
        """Read atom information from the file."""
        self.atoms = []
        for atom in atom_text.splitlines():
            atom = atom.strip().split()
            if not atom:
                continue
            self.atoms.append(Atom(atom[0], [float(x) for x in atom[1:4]]))

    def atoms_attached_to(self, point, bond_length, direction):
        """Return a list of atoms at the specified position."""
        new_atoms = [copy.copy(atom) for atom in self.atoms]
        vector = self.orientation
        rotate_matrix = matrix_rotate(vector, direction)
        for atom in new_atoms:
            atom.pos = np.dot(rotate_matrix, atom.pos)
            atom.pos = (atom.pos + point + bond_length*np.array(direction))
        return new_atoms


def matrix_rotate(source, target):
    """Create a rotation matrix that will rotate source on to target."""
    source = asarray(source)/norm(source)
    target = asarray(target)/norm(target)
    v = cross(source, target)
    c = dot(source, target)
    h = (1 - c)/(np.dot(v, v))
    return array([[c + h*v[0]*v[0], h*v[0]*v[1] - v[2], h*v[0]*v[2] + v[1]],
                  [h*v[0]*v[1] + v[2], c + h*v[1]*v[1], h*v[1]*v[2] - v[0]],
                  [h*v[0]*v[2] - v[1], h*v[1]*v[2] + v[0], c + h*v[2]*v[2]]])


def direction3d(source, target):
    """Return the vector connecting two 3d points."""
    return [target[0] - source[0],
            target[1] - source[1],
            target[2] - source[2]]

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def string_to_tuple(value, dtype=None):
    """Parse a list of items, ignoring whitespace, brackets and commas."""
    value = [x for x in re.split('[\s,\(\)\[\]]*', value) if x]
    if dtype is not None:
        return tuple([dtype(x) for x in value])
    else:
        return tuple(value)


if __name__ == '__main__':

    irmof1 = ModifiableStructure("IMOF1")
    irmof1.from_cif("MOF5/277428.cif")

    irmof1.gen_connection_table()
    #irmof1.symmetry_conections()

    f_groups = FunctionalGroupLibrary()
    f_groups.from_file()
    print(f_groups)

    print len(irmof1.attachments)

    for r in range(len(irmof1.attachments)+1):
        print(factorial(len(irmof1.attachments))/(factorial(r)*factorial((len(irmof1.attachments)-r))))

    for idx, attach_points in enumerate(powerset(irmof1.attachments)):
        attachment = f_groups['NH2']
    #    print attach_points
        new_mof = list(irmof1.atoms)
        for this_point in attach_points:
            attach_id = this_point[0]
            attach_to = this_point[1][0][1]
            attach_at = irmof1.atoms[attach_to].pos
            attach_towards = direction3d(attach_at, irmof1.atoms[attach_id].pos)
            bond_length = 0.5*(irmof1.atoms[attach_to].vdw_radius + attachment.atoms[0].vdw_radius)
            new_mof[attach_id:attach_id+1] = [None]
            new_mof.extend(attachment.atoms_attached_to(attach_at, bond_length, attach_towards))
        new_mof = [an_atom for an_atom in new_mof if an_atom is not None]
        print idx, '\r',
        if not idx % 500:
            with open('output%04i.xyz' % idx, 'wb') as output_file:
                output_file.writelines(to_xyz(new_mof))
