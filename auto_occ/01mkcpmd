#!/usr/bin/env python

import os,sys,time
from JOB_OPTIONS import *

pid = str(os.getpid())

EXIT_SUCCESS = 0
EXIT_FAILURE = 1


#This script makes a CPMD input file and takes two arguments to do so
#The first argument is the name of the XYZ_INPUT file
#The second argument is the name of the desired CPMD input file without the .in

usage  = ''' 
---------------------------------------------------
Usage:
01mkcpmd [XYZ_INPUT filename] [CPMD INPUT filename]
---------------------------------------------------
'''

#check if there are enough arguments in the call to main
if(len(sys.argv) < 3):
    print " ["+pid+"] "+time.ctime()+ "| "+"Too Few Arguments"
    print " ["+pid+"] "+time.ctime()+ "| "+usage
    sys.exit(EXIT_FAILURE)

dump = True
basevars = dir()

def vardump(newvars):
    if dump:
	for varname in basevars:
            newvars.remove(str(varname))
        for possiblefunction in newvars:
            if str(eval(str(possiblefunction))).__contains__("0x"):
                newvars.remove(str(possiblefunction))
        for possiblefunction in newvars:
            if str(eval(str(possiblefunction))).__contains__("0x"):
                newvars.remove(str(possiblefunction))
        newvars.remove("psp_files")
        newvars.remove("params1")
        newvars.remove("params2")
        for newvarname in newvars:
            print "#dump#%(name)35s evaluates to | %(eval)35s" % {'name':newvarname,'eval':eval(newvarname)}



#Check for vanderbilt need for DUAL directive increase (Search "DUAL" in CPMD Manual for details)
CPMD_CHECK_FOR_DUAL = True
CPMD_VDB_DUAL = 6


CPMD_CONVERGENCE_CRIT_ORBITALS = init_variable("CPMD_CONVERGENCE_CRIT_ORBITALS")
CPMD_MAX_INTERATIONS = init_variable("CPMD_MAX_INTERATIONS")
CPMD_CUTOFF = init_variable("CPMD_CUTOFF")

#Initializing some lists
atom_labels = []
atom_counts = []
coordered = []
psp_choices = []
unitvecs = []


#PSP Parameters
CPMD_PSP_PATH = init_variable("CPMD_PSP_PATH")
CPMD_DEFAULT_FUNCTIONAL = init_variable("CPMD_DEFAULT_FUNCTIONAL")
CPMD_DEFAULT_PSP_TYPE  = init_variable("CPMD_DEFAULT_PSP_TYPE")
CPMD_DEFAULT_LMAX_FLAG  = init_variable("CPMD_DEFAULT_LMAX_FLAG")
CPMD_CHARGE = init_variable("CPMD_CHARGE")
CPMD_OPTIMIZE_HYDROGENS = str(init_variable("CPMD_OPTIMIZE_HYDROGENS"))

#Element list for reduction
#You may want to pull one of these elements in the event that your input labels include Carbons named Ca or some analogous situation.

elements = ["H","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar",
            "K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br",
            "Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te",
            "I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm",
            "Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Th","Pa","U",
            "Po","At","Rn","Fr","Ra","Ac","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr",
            "Rf","Db","Sg","Bh","Hs","Mt"]


#Function to Character-interatively replace labels by closest progressive match

def relabel(old_list,labels):
    recovery = 0.0
    for i in range(len(old_list)):
        found = 0
        for j in range(len(labels)):
#            print " ["+pid+"] "+time.ctime()+ "| "+old_list[i][:2]
            if old_list[i][0][:2].upper() == labels[j].upper():
                old_list[i][0] = labels[j]
                found = 1
        if not(found):
            for j in range(len(labels)):
                if old_list[i][0][:1].upper() == labels[j].upper():
                    old_list[i][0] = labels[j]
                    found = 1
        recovery += found
    recovery/=float(len(old_list))
    if recovery < 1.0:
        print " ["+pid+"] "+time.ctime()+ "| "+"Not all atoms could be converted to appropriate labels"
        sys.exit(EXIT_FAILURE)

def is_binary_psp(filename):
    found = 0
    total = 0
    try:
        tempfile = open(filename,'r')
    except:
        print " ["+pid+"] "+time.ctime()+ "| "+"Error while trying to determine if PSP file is binary. File not found."
        sys.exit(EXIT_FAILURE)
    dump = tempfile.read()
    tempfile.close()
    for i in dump:
        if i < "\x20" or i > "\x7A" :
            found+=1
        total+=1
    if float(found)/total > 0.50:
        return True
    else:
        return False

def print_gauss(directory):
    username=os.popen('whoami').readline().split()[0]
    filename = directory+username+".gjf"
    outfile = open(filename,'w')
    outfile.write ("# opt hf/3-21g \n")
    outfile.write ("\n")
    outfile.write ("Title \n")
    outfile.write ("\n")
    outfile.write ("0 1 \n")
    for i in range(3):
        outfile.write ("TV  %15.5f  %15.5f  %15.5f\n" %(float(unitvecs[i][0]), float(unitvecs[i][1]), float(unitvecs[i][2])))
    for i in range(len(coordered)):
        outfile.write ("%3s  %15.5f  %15.5f  %15.5f\n" %(coordered[i][0][0],float(coordered[i][0][1]),float(coordered[i][0][2]),float(coordered[i][0][3])))
    outfile.write ("\n")
    outfile.write ("\n")
    outfile.close()
    print
    print " ["+pid+"] "+time.ctime()+ "| "+"Gaussian input file written to: " + filename


def set_up_hydrogen_optimization():
 print " ["+pid+"] "+time.ctime()+ "| "+"Redefining CPMD input for hydrogen optimization."
 global Hs_begin
 global atom_counts
 global atom_labels
 
 Hs_begin =   sum(atom_counts[:-1]) 

 global params1
 params1 = '''&CPMD
  OPTIMIZE GEOMETRY WAVEFUNCTION XYZ
  CONVERGENCE ORBITALS
  '''+str(CPMD_CONVERGENCE_CRIT_ORBITALS)+'''
  CONVERGENCE GEOMETRY
  5.0d-4
  MAXITER
  '''+str(CPMD_MAX_INTERATIONS)+'''
  PCG MINIMIZE
  ELECTROSTATIC POTENTIAL
&END

&DFT
    FUNCTIONAL PBE
&END

&SYSTEM
  ANGSTROM
 CELL VECTOR
'''



params1 = '''&CPMD
  OPTIMIZE WAVEFUNCTION XYZ
  CONVERGENCE ORBITALS
  '''+str(CPMD_CONVERGENCE_CRIT_ORBITALS)+'''
  CONVERGENCE GEOMETRY
  5.0d-4
  MAXITER
  '''+str(CPMD_MAX_INTERATIONS)+'''
  PCG MINIMIZE
  ELECTROSTATIC POTENTIAL
&END

&DFT
    FUNCTIONAL PBE
&END

&SYSTEM
  ANGSTROM
 CELL VECTOR
'''

params2 = '''  CUTOFF
'''+str(CPMD_CUTOFF)+'''
  CHARGE
'''+str(CPMD_CHARGE)+'''
&END

'''

#         Actual code begins here
#-------------------------------------------------------
#-------------------------------------------------------



f1=open(sys.argv[2]+".in",'w')
try:
    f2=open(sys.argv[1],'r')
except:
    print " ["+pid+"] "+time.ctime()+ "| "+"Input file not found | "+sys.argv[1]
    sys.exit(EXIT_FAILURE)


#Read in unit vectors and write to CPMD input file
unitvecs = f2.readlines()
for i in range(len(unitvecs)):
    unitvecs[i] = unitvecs[i][unitvecs[i].find("CV"):].replace("\n","").replace("CV","").strip()
while True:
 try:
  unitvecs.remove("")
 except:
  break

if(len(unitvecs)!= 3):
    print " ["+pid+"] "+time.ctime()+ "| "+"System resolved <> 3 unit cell vectors. Check input file. Make sure unit vectors are marked \"CV\""
    sys.exit(EXIT_FAILURE)
else:
    for i in range(3):
        unitvecs[i] = unitvecs[i].split()

print " ["+pid+"] "+time.ctime()+ "| "+"Found the fallowing unit cell vectors:"
for i in range(3):
    print " ["+pid+"] "+time.ctime()+ "| "+"Unit cell vector "+{0:"A",1:"B",2:"C"}[i]+" : "+str(unitvecs[i])




f2.seek(0)
coords = f2.readlines()

for i in range(len(coords)):
    coords[i] = coords[i][:coords[i].find("CV")].replace("\n","").strip()
while True:
    try:
        coords.remove("")
    except:
        break

natoms = len(coords)
if natoms == 0:
    print " ["+pid+"] "+time.ctime()+ "| "+"No Atoms found in Input File.  Check file."
    sys.exit(EXIT_FAILURE)


#Replace raw line strings or coords with lists of strings for each element
for i in range (len(coords)):
    coords[i] = str(coords[i]).strip().split()

#Reduce the element symbols to proper symbols
relabel(coords,elements)

#Determine the minimal set of unique labels
for i in range(natoms):
    Found = "0"
    for j in range(len(atom_labels)):
        if (coords[i][0] == atom_labels[j]):
            Found = "1"
    if (Found != "1"):
        atom_labels.append(coords[i][0])

#Reorder atom_labels so that Hs are added last

for i in range(len(atom_labels)):
    if atom_labels[i] == "H":
        atom_labels[i] = atom_labels[-1]
        atom_labels[-1] = "H"
        


#Determine the quantity of each destinct label
for j in atom_labels:
    numfound = 0
    for i in range (natoms):
        if (coords[i][0] == j):
            numfound+=1
            coordered.append([coords[i],i])
    atom_counts.append(numfound)        

#A little user side assurance
print " ["+pid+"] "+time.ctime()+ "| "+"System described as:"
print " ["+pid+"] "+time.ctime()+ "| "+str(atom_labels)
print " ["+pid+"] "+time.ctime()+ "| "+str(atom_counts)


#Checking availability of default PSP files, and querying for alternatives otherwise.

try:
    psp_files = os.listdir(CPMD_PSP_PATH)
except:
    print " ["+pid+"] "+time.ctime()+ "| "+"Invalid directory for psp files or problem reading directory.  Check input."
    sys.exit(EXIT_FAILURE)



for i in range(len(atom_labels)):
    sublist = []
    if (os.path.exists(CPMD_PSP_PATH+atom_labels[i]+"_"+CPMD_DEFAULT_PSP_TYPE+"_"+CPMD_DEFAULT_FUNCTIONAL+".psp")):
        psp_choices.append(atom_labels[i]+"_"+CPMD_DEFAULT_PSP_TYPE+"_"+CPMD_DEFAULT_FUNCTIONAL+".psp")
    elif (os.path.exists(CPMD_PSP_PATH+atom_labels[i]+"_"+CPMD_DEFAULT_PSP_TYPE+"_"+CPMD_DEFAULT_FUNCTIONAL)):
        psp_choices.append(atom_labels[i]+"_"+CPMD_DEFAULT_PSP_TYPE+"_"+CPMD_DEFAULT_FUNCTIONAL)
    else:
        print " ["+pid+"] "+time.ctime()+ "| "+"\nDefault \""+atom_labels[i]+"_"+CPMD_DEFAULT_PSP_TYPE+"_"+CPMD_DEFAULT_FUNCTIONAL+".psp\" not found, please select from the list below:"
        for j in psp_files:
            if(j.split("_")[0] == atom_labels[i]):
                sublist.append(j)
        if len(sublist) == 0:
            print " ["+pid+"] "+time.ctime()+ "| "+"No pseudopotential files found in psp path matching atom type: "+atom_labels[i]
            sys.exit(EXIT_FAILURE)
        for j in range(len(sublist)):
            print " ["+pid+"] "+time.ctime()+ "| "+"Entry %(acc_j)3i: "% {'acc_j':j}+sublist[j] 

        choice = raw_input("Enter index number:")
        choice_valid = False

        while not(choice_valid):
            try: 
                if range(len(sublist)).__contains__(int(choice)):
                    choice_valid = True
                else:
                    print " ["+pid+"] "+time.ctime()+ "| "+"Invalid index choice: please choose again\n"
                    choice = raw_input("Enter index number:")
            except:
                print " ["+pid+"] "+time.ctime()+ "| "+"Invalid index choice: please choose again\n"
                choice = raw_input("Enter index number:")
        psp_choices.append(sublist[int(choice)])

if len(psp_choices) == 0:
    print " ["+pid+"] "+time.ctime()+ "| "+"Failed to generate list of psp choices. Error."
    sys.exit(EXIT_FAILURE)
print " ["+pid+"] "+time.ctime()+ "| "+"Writing ATOMS section . . ." 

print " ["+pid+"] "+time.ctime()+ "| "+str(psp_choices)
HAS_VDB = False


#check psp_choices for VDB (vanderbilt) potentials.
for i in range(len(psp_choices)):
    if (psp_choices[i].find("VDB")>0)or(psp_choices[i].find("VAN")>0):
        HAS_VDB=True
        if is_binary_psp(CPMD_PSP_PATH+"/"+psp_choices[i]):
             psp_choices[i] = psp_choices[i]+" BINARY"
        else:
             psp_choices[i] = psp_choices[i]+" FORMATTED"




#Make sure there are hydrogens if CPMD_OPTIMIZE_HYDROGENS is True
hydrogens_present = False
if CPMD_OPTIMIZE_HYDROGENS:
    for i in atom_labels:
        if i.strip().upper() == "H":
            hydrogens_present = True
    if not(hydrogens_present):
        print " ["+pid+"] "+time.ctime()+ "| "+"No Hydrogens found to optimize in system. "
    else:
        set_up_hydrogen_optimization()
else:
    print " ["+pid+"] "+time.ctime()+ "| "+"Hydrogen optimization not selected."





print " ["+pid+"] "+time.ctime()+ "| "+"Writing CPMD input file . . ."

f1.write(str(params1))
for i in range(3):
    try:
        f1.write("%(ucva)20.12f%(ucvb)20.12f%(ucvc)20.12f\n" % {'ucva' : float(unitvecs[i][0]), 'ucvb' : float(unitvecs[i][1]), 'ucvc' : float(unitvecs[i][2])})
    except:
        print " ["+pid+"] "+time.ctime()+ "| "+"Unit cell vectors have uninterpretable characters in them.  Check input file."
        sys.exit(EXIT_FAILURE)

if HAS_VDB and CPMD_CHECK_FOR_DUAL: 
    f1.write("DUAL "+str(CPMD_VDB_DUAL)+"\n")

f1.write(str(params2))


#Start writing ATOMS section with appropriate psp labels, counts, and atom coordinates
f1.write("&ATOMS\n")
if len(atom_labels) == 0:
    print " ["+pid+"] "+time.ctime()+ "| "+"Atom labels missing.  See code."
    sys.exit(EXIT_FAILURE)
for i in range(len(atom_labels)):
    f1.write("*"+str(psp_choices[i])+"\n")
    f1.write("LMAX="+str(CPMD_DEFAULT_LMAX_FLAG)+"\n")
    f1.write(str(atom_counts[i])+"\n")
    if atom_counts[i] == 0:
        print " ["+pid+"] "+time.ctime()+ "| "+"Error, zero atoms counted while processing ATOMS section."
        sys.exit(EXIT_FAILURE)
    for j in range(atom_counts[i]):
       f1.write(str(coordered[sum(atom_counts[:i])+j][0][1]).rjust(20)
       +str(coordered[sum(atom_counts[:i])+j][0][2]).rjust(20)
       +str(coordered[sum(atom_counts[:i])+j][0][3]).rjust(20)+"\n")

if CPMD_OPTIMIZE_HYDROGENS and hydrogens_present:
   f1.write(''' &CONSTRAINTS
   FIX SEQUENCE
    1 '''+str(Hs_begin)+'''
 &END CONSTRAINTS
''')

f1.write("&END")
f1.close()

print " ["+pid+"] "+time.ctime()+ "| "+"Done. Writing ORDER file"


#Output ORDER of atoms to file ORDER_[file]
f3=open('ORDER_'+sys.argv[2],'w')
for i in range(len(atom_labels)):
    for j in range(atom_counts[i]):
       f3.write(str(coordered[sum(atom_counts[:i])+j][1]+1).rjust(5)+"\n")     
f3.close()

print " ["+pid+"] "+time.ctime()+ "| "+"ORDER file completed."


print " ["+pid+"] "+time.ctime()+ "| "+"Printing Gaussian Input file."

print_gauss("./")

#vardump(dir())
